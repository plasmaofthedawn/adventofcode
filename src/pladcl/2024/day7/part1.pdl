state read_first
    read_number()
    `s1`

    # go past ": "
    adjust_index(2)

    set_state(read_values)
end

state read_values
    
    if `ln` == ' ' then
        return
    end

    read_number()

    `lc:2`
    `lc1+sc`

end

interrupt program_start
    `_1S2`
    `0sc`
    `0so`
end

interrupt newline
    `l1n`
    `[: ]n`

    for '!' in 0 to `lc` do 
        `l!;2n`
        `[ ]n`
    end

    `10an`
    `2lc1-^se`

    for '!' in 0 to `le` do
        if calc_value() == `l1` then
            `[ok]n10an`
            `loL1+so`
        end
    end

    adjust_index(1)
    `0sc`
    set_state(read_first)
end 

interrupt program_end
    `[wow]f`
    `lop`
end


function calc_value

    `0;2` # get first value
    
    for '?' in 1 to `lc` do 

        `l?;2` # get next value
    
        # get bit
        `l!`
        `2`
        `l?1-`
        `^/2%`
        #`dn`
        `sb`

        if `lb` == 0 then
            #`[+]n`
            `+`
        end
        if `lb` == 1 then
            #`[*]n`
            `*`
        end
    end

end


function read_number
    read_number_start()
    read_number_end()
end

function read_number_start

    -1
    # ret _1 if not a digit
    return_if(`ln` < 48)
    return_if(`ln` > 57)
    `st`

    # throw the true digit onto the stack
    `ln48-`

    # inc i
    adjust_index(1)
    # recurse
    read_number_start()

end

function read_number_end

    # if we only have 1 item on stack (-1) we found no number, so return
    return_if(1 == `z`)
    
    # push entire number thing onto temporary stack
    `[STz0<.]ds.x`
    # multiply ten then pop and add repeatedly until done
    `0`
    `[LTd_1=qr10*+l.x]ds.x`
    # get rid of the extra -1
    `st`
    # decrement i so we reread the skipped char
    adjust_index(-1)

end

state read_first
    read_number()
    `S1`
    set_state(read_second)
end

state read_second
    return_if(`ln` == 32)
    read_number()
    `d;2` # load current amount
    `1+`  # inc
    `r:2` # and store
end

interrupt newline
    adjust_index(1)
    set_state(read_first)
end

interrupt program_start
    `_1S1`
end

interrupt program_end

    debug_print("wow")

    # burn off one
    `L1st`

    while `L1ds!` != -1 do
        `l!d;2*`
        `lo+so`
    end

    `lop`

end

function read_number
    read_number_start()
    read_number_end()
end

function read_number_start

    -1
    # ret _1 if not a digit
    return_if(`ln` < 48)
    return_if(`ln` > 57)
    `st`

    # throw the true digit onto the stack
    `ln48-`

    # inc i
    adjust_index(1)
    # recurse
    read_number_start()

end

function read_number_end

    # if we only have 1 item on stack (-1) we found no number, so return
    return_if(1 == `z`)
    
    # push entire number thing onto temporary stack
    `[STz0<.]ds.x`
    # multiply ten then pop and add repeatedly until done
    `0`
    `[LTd_1=qr10*+l.x]ds.x`
    # get rid of the extra -1
    `st`
    # decrement i so we reread the skipped char
    adjust_index(-1)

end



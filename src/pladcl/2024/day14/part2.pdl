interrupt program_start
    `101sw`
    `103sh`

    `0s.` # num 
    `0sc` # count

    # X: x array
    # Y: y array
    `0sm` #x mean
    `0sM` #y mean

    `0sv` # x variance
    `0sV` # y variance

    `10 10^s(` # min x variance
    `10 10^s)` # min y variance

    `0s{` # min x loc
    `0s}` # min y loc

    `0sF` # finished flag

    # A: posx
    # B: posy
    # C: velx
    # D: vely

end

state read

    adjust_index(2) # go past p=
    read_number()
    `lc:A` # x position
    adjust_index(1) # go past ,
    read_number()
    `lc:B`
    
    adjust_index(3) # go past " v="
    read_number()
    `lc:C` #dx
    adjust_index(1) # go past ","
    read_number()
    `lc:D`

    inc('c')

    #adjust_index(1) # go past newline 
end


interrupt program_end

    `[finished reading]n10an`
    #`[x=]nlxn[ y=]nlyn[ 1=]nl1n[ 2=]nl2n10an`

    # calculate variances
    for '.' in 0 to 103 do 
        calculate_variance()
    end

    `[lowest x var at ]nl{n[, lowest y var at ]nl}n10an`
        
    while `l{` != `l}` do 
        `l{101+s{` # inc x by 101

        if `l}` < `l{` then
            `l}103+s}` # inc y by 103 if it's smaller
        end

    end

    `[calculated first tree at ]nl}n[, printing...]n`
    `l}s.`
    calculate_positions()

    for '!' in 0 to `lhlw*` do
        if `l!lw%` == 0 then 
            `10an`
        end
        if `l!;Z` == 0 then 
            `[ ]n`
        end
        if `l!;Z` != 0 then 
            `[#]n`
        end
    end

    `10an[    at ]nl.n10an`

end


function calculate_variance

    # find positions
    for '!' in 0 to `lc` do 

        `l!;Al!;Cl.*+lw%sx`
        `l!;Bl!;Dl.*+lh%sy`

        if `lx` < 0 then 
            `lxlw+sx`
        end
        if `ly` < 0 then 
            `lylh+sy`
        end

        # store these
        `lxl!:X`
        `lyl!:Y`

        `lmlx+sm`
        `lMly+sM`

    end


    # x and y variance calculation
    `0sv`
    `0sV`

    `lmlc/sm`
    `lMlc/sM`

    for '!' in 0 to `lc` do
        `lvl!;Xlm-2^+sv`
        `lVl!;Ylm-2^+sV`
    end

    if `lv` < `l(` then
        `lvs(`
        `l.s{`
    end
    if `lV` < `l)` then
        `lVs)`
        `l.s}`
    end


    `[.=]nl.n[ v=]nlvn[ V=]nlVn10an`

end

function calculate_positions

    # find positions
    for '!' in 0 to `lc` do 

        `l!;Al!;Cl.*+lw%sx`
        `l!;Bl!;Dl.*+lh%sy`

        if `lx` < 0 then 
            `lxlw+sx`
        end
        if `ly` < 0 then 
            `lylh+sy`
        end

        `1`
        # index of this
        `lylw*lx+`
        `:Z` # store in Z
    end


end


function read_number
    # does no error checking
    `1` # sign
    if `ln` == '-' then 
        `2-` # negative
        adjust_index(1)
    end

    `0` # c num
    while `ln` >= '0' and `ln` <= '9' do 

        `10*`
        `ln48-+` # add in number
        adjust_index(1)
    
    end

    #adjust_index(-1)

    `*`

end

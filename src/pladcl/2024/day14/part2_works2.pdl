interrupt program_start
    `101sw`
    `103sh`

    `0s.` # num 
    `0sc` # count

    # X: x array
    # Y: y array
    `0sm` #x mean
    `0sM` #y mean

    `0sv` # x variance
    `0sV` # y variance

    `10 10^s(` # min x variance
    `10 10^s)` # min y variance

    `0s{` # min x loc
    `0s}` # min y loc

    `0sF` # finished flag

    # A: posx
    # B: posy
    # C: velx
    # D: vely

end

state read

    adjust_index(2) # go past p=
    read_number()
    `sx` # x position
    adjust_index(1) # go past ,
    read_number()
    `sy`
    
    adjust_index(3) # go past " v="
    read_number()
    `s1` #dx
    adjust_index(1) # go past ","
    read_number()
    `s2`

    #adjust_index(1) # go past newline

    #`[x=]nlxn[ y=]nlyn[ 1=]nl1n[ 2=]nl2n10an`
    
    `lxl1l.*+lw%sx`
    `lyl2l.*+lh%sy`

    if `lx` < 0 then 
        `lxlw+sx`
    end
    if `ly` < 0 then 
        `lylh+sy`
    end

    #`[nx=]nlxn[ ny=]nlyn10an`

    
    # store these
    `lxlc:X`
    `lylc:Y`
    inc('c')

    `lmlx+sm`
    `lMly+sM`

    # if done put it in an array for printing
    if `lF` == 1 then 
        `1`
        # index of this
        `lylw*lx+`
        `:Z` # store in Z
    end

    if `li1+;I` == -1 then 

        #`[.]n`

        # print tree when done
        if `lF` == 1 then 
            for '!' in 0 to `lhlw*` do
                if `l!lw%` == 0 then 
                    `10an`
                end
                if `l!;Z` == 0 then 
                    `[ ]n`
                end
                if `l!;Z` != 0 then 
                    `[#]n`
                end
            end

            `10an[    at ]nl.n10an`
            return
        end

        # if we're done here
        if `l.` == 103 then

            `[lowest x var at ]nl{n[, lowest y var at ]nl}n10an`
        
            while `l{` != `l}` do 
                `l{101+s{` # inc x by 101
    
                if `l}` < `l{` then
                    `l}103+s}` # inc y by 103 if it's smaller
                end

            end

            `[calculated first tree at ]nl}n[, printing...]n`

            `l}s.`
            rewind()
            `1sF`
        end
        
        if `lF` != 1 then

            # x and y variance
            `0sv`
            `0sV`

            `lmlc/sm`
            `lMlc/sM`

            for '!' in 0 to `lc` do
                `lvl!;Xlm-2^+sv`
                `lVl!;Ylm-2^+sV`
            end

            if `lv` < `l(` then
                `lvs(`
                `l.s{`
            end
            if `lV` < `l)` then
                `lVs)`
                `l.s}`
            end


            `[.=]nl.n[ v=]nlvn[ V=]nlVn10an`

            `0sm`
            `0sM`
            `0sc`
            rewind()
            inc('.')
        end
    end
end



function read_number
    # does no error checking
    `1` # sign
    if `ln` == '-' then 
        `2-` # negative
        adjust_index(1)
    end

    `0` # c num
    while `ln` >= '0' and `ln` <= '9' do 

        `10*`
        `ln48-+` # add in number
        adjust_index(1)
    
    end

    #adjust_index(-1)

    `*`

end
